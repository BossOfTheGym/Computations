#version 460 core

#ifndef CONFIGURED
	#define WORKGROUP_X 16
	#define WORKGROUP_Y 16
#endif

#define WORKGROUP ivec2(WORKGROUP_X, WORKGROUP_Y)

#define CACHE_X (WORKGROUP_X + 2)
#define CACHE_Y (WORKGROUP_Y + 2)
#define CACHE_SIZE (CACHE_X * CACHE_Y)

layout(local_size_x = WORKGROUP_X, local_size_y = WORKGROUP_Y) in;

// used both for read and write, boundary is not calculated
layout(binding = 0, r32f) uniform image2D solution;
layout(binding = 1, r32f) uniform readonly image2D f;

uniform int rb;
uniform float w;
uniform float hx;
uniform float hy;

// first is x, second is y
shared float cache[CACHE_SIZE];

int cacheFlatIndex(ivec2 indices)
{
	return indices.x * CACHE_Y + indices.y + (CACHE_Y + 1);
}

float cacheLoadValue(ivec2 indices)
{
	return cache[cacheFlatIndex(indices)];
}

void cacheStoreValue(ivec2 indices, float value)
{
	cache[cacheFlatIndex(indices)] = value;
}

// returns local index(zero-based), global(can be out of bounds) 
void getGlobalLocalInvocationID(out ivec2 global, out ivec2 local)
{
	local = ivec2(gl_LocalInvocationID.xy);
	global = ivec2(gl_GlobalInvocationID.xy);
}

bool inInnerDomainX(ivec2 global, ivec2 size)
{
	return 0 < global.x && global.x < size.x - 1;
}

bool inInnerDomainY(ivec2 global, ivec2 size)
{
	return 0 < global.y && global.y < size.y - 1;
}

bool onUpperBoundaryX(ivec2 coord, ivec2 size)
{
	return coord.x == size.x - 1;
}

bool onLowerBoundaryX(ivec2 coord, ivec2 size)
{
	return coord.x == 0;
}

bool onUpperBoundaryY(ivec2 coord, ivec2 size)
{
	return coord.y == size.y - 1;
}

bool onLowerBoundaryY(ivec2 coord, ivec2 size)
{
	return coord.y == 0;
}

float update(float u00, float um10, float u10, float u0m1, float u01, float f00)
{
	float hxhx = hx * hx;
	float hyhy = hy * hy;
	float H = -2.0 / hxhx - 2.0 / hyhy;
	float u = f00 / H - (um10 + u10) / (hxhx * H) - (u0m1 + u01) / (hyhy * H);

	return (1.0 - w) * u00 + w * u;
}

void main()
{
	ivec2 global, local;
	getGlobalLocalInvocationID(global, local);

	ivec2 size = imageSize(solution);

	float f00 = imageLoad(f, global).x;

	bool innerX = inInnerDomainX(global, size);
	bool innerY = inInnerDomainY(global, size);

	cacheStoreValue(local, imageLoad(solution, global).x);
	if (innerY) {
		if (onUpperBoundaryY(local, WORKGROUP)) {
			cacheStoreValue(local + ivec2(0, 1), imageLoad(solution, global + ivec2(0, 1)).x);
		}
		if (onLowerBoundaryY(local, WORKGROUP)) {
			cacheStoreValue(local + ivec2(0, -1), imageLoad(solution, global + ivec2(0, -1)).x);
		}
	}
	if (innerX) {
		if (onUpperBoundaryX(local, WORKGROUP)) {
			cacheStoreValue(local + ivec2(1, 0), imageLoad(solution, global + ivec2(1, 0)).x);
		}
		if (onLowerBoundaryX(local, WORKGROUP)) {
			cacheStoreValue(local + ivec2(-1, 0), imageLoad(solution, global + ivec2(-1, 0)).x);
		}
	}

	barrier();
	memoryBarrierShared();

	float u00  = cacheLoadValue(local               );
	float um10 = cacheLoadValue(local + ivec2(-1, 0));
	float u10  = cacheLoadValue(local + ivec2(+1, 0));
	float u0m1 = cacheLoadValue(local + ivec2(0, -1));
	float u01  = cacheLoadValue(local + ivec2(0, +1));

	u00 = update(u00, um10, u10, u0m1, u01, f00);
	if ((global.x + global.y & 0x1) != rb && innerX && innerY) {
		imageStore(solution, global, vec4(u00));
	}
}