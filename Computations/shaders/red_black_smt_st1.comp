#version 460 core

#define STAGE 1

#define STEPS 2

#define TRUE_STEPS (2 * STEPS)

#define WORKGROUP_X 8
#define WORKGROUP_Y 8
#define WORKGROUP ivec2(WORKGROUP_X, WORKGROUP_Y)

#define TRUE_WORKGROUP_X (2 * WORKGROUP_X)
#define TRUE_WORKGROUP_Y (2 * WORKGROUP_Y)
#define TRUE_WORKGROUP ivec2(TRUE_WORKGROUP_X, TRUE_WORKGROUP_Y)

#define WORKGROUP_X_OVERLAP (WORKGROUP_X + 2)
#define WORKGROUP_Y_OVERLAP (WORKGROUP_Y + 2)
#define WORKGROUP_OVERLAP ivec2(WORKGROUP_X_OVERLAP, WORKGROUP_Y_OVERLAP)

#define TRUE_WORKGROUP_X_OVERLAP (2 * WORKGROUP_X_OVERLAP)
#define TRUE_WORKGROUP_Y_OVERLAP (2 * WORKGROUP_Y_OVERLAP)
#define TRUE_WORKGROUP_OVERLAP ivec2(TRUE_WORKGROUP_X_OVERLAP, TRUE_WORKGROUP_Y_OVERLAP)

#ifndef FAST_UPDATE
	#define pred_t bool
	#define UPDATE_VALUE(u, u_new, pred) ((pred) ? (u_new) : (u))
#else
	#define pred_t float
	#define UPDATE_VALUE(u, u_new, pred) ((u) + ((u_new) - (u)) * (pred))
#endif

layout(local_size_x = WORKGROUP_X + 2, local_size_y = WORKGROUP_Y + 2) in;

#define CACHE_X (TRUE_WORKGROUP_X_OVERLAP + 2)
#define CACHE_Y (TRUE_WORKGROUP_Y_OVERLAP + 2)
#define CACHE_SIZE (CACHE_Y * CACHE_X)

// picture is stored in a row-major manner
// used both for read and write, boundary is not calculated
layout(binding = 0, r32f) uniform image2D solution[2];
layout(binding = 2, r32f) uniform image2D intermediate;
layout(binding = 3, r32f) uniform readonly image2D f;

uniform int curr; // 0 or 1
uniform float w;
uniform float hx;
uniform float hy;
uniform int numWorkgroupsX; // num of workgroups along x-axis
uniform int numWorkgroupsY; // num of workgroups along y-axis

// first is x(i), second is y(j)
shared float cache[CACHE_SIZE];

int cacheFlatIndex(ivec2 indices)
{
	return indices.x * CACHE_Y + indices.y + (CACHE_Y + 1);
}

float cacheLoadValue(ivec2 indices)
{
	return cache[cacheFlatIndex(indices)];
}

void cacheStoreValue(ivec2 indices, float value)
{
	cache[cacheFlatIndex(indices)] = value;
}

// corners
#define RIGHT  0
#define TOP    1
#define LEFT   2
#define BOTTOM 3

#define CORNER_CELLS (2 * 2)
#define CORNERS 4
#define CORNERS_SIZE (CORNER_CELLS * CORNERS)
// buffer containing right, top, left and bottom values on the last iteration
// size = (numWorkgroupsX + 2) * (numWorkgroupsY + 2) * CORNERS_SIZE
// padded to avoid out-of-bound access
layout(binding = 0, std430) buffer Corners
{
	float corners[];
};

// returns flat index of corners[work.x][work.y][corner][0]
int cornersFlatIndex(ivec2 work, int corner)
{
	work += 1; // padding
	return ((work.x * (numWorkgroupsY + 2) + work.y) * CORNERS + corner) * CORNER_CELLS;
}

void loadCorners(
	ivec2 work, int corner, 
	out float c00, out float c10,
	out float c01, out float c11)
{
	int i = cornersFlatIndex(work, corner);
	c00 = corners[  i  ];
	c10 = corners[i + 1];
	c01 = corners[i + 2];
	c11 = corners[i + 3];
}

void storeCorners(
	ivec2 work, int corner,
	in float c00, in float c10,
	in float c01, in float c11)
{
	int i = cornersFlatIndex(work, corner);
	corners[  i  ] = c00;
	corners[i + 1] = c10;
	corners[i + 2] = c01;
	corners[i + 3] = c11;
}

// returns ivec3(corner, workDeltaX, workDeltaY)
ivec3 whatCorner()
{
	ivec2 index = ivec2(gl_LocalInvocationID.xy);
	ivec3 data = ivec3(-1);
	data = all(equal(index, ivec2(WORKGROUP_X, 0))) ? ivec3(BOTTOM, 1, 0) : data;
	data = all(equal(index, ivec2(WORKGROUP_X, WORKGROUP_Y))) ? ivec3(RIGHT, 0, 1) : data;
	data = all(equal(index, ivec2(0, WORKGROUP_Y))) ? ivec3(TOP, -1, 0) : data;
	data = all(equal(index, ivec2(0, 0))) ? ivec3(LEFT, 0, -1) : data;
	return data;
}

// recalculate workgroup id (checkerboard pattern)
// example grig 5x5:
// 0 1 | 0 1 | 0  - last row, index calculated differently
// -------------
// 1 0 | 1 0 | 1
// 0 1 | 0 1 | 0
// -------------
// 1 0 | 1 0 | 1
// 0 1 | 0 1 | 0
void getWorkgroupID(out ivec2 work, int currStage)
{
	currStage ^= 1;

	int workFlat = int(gl_WorkGroupID.x);
	work.x = workFlat % numWorkgroupsX;     // base case
	work.y = workFlat / numWorkgroupsX * 2; // base case
	if (work.y == numWorkgroupsY - 1) { // triggered only if numWorkgroupsY is uneven and work.y is last row
		work.x = 2 * work.x + currStage; // last row index (stage inverted)
	}
	work.y += (work.x + currStage) % 2; // if last row then turns into work.y += 0
}

// returns local index(zero-based), global(can be out of bounds)
void getGlobalLocalInvocationID(in ivec2 work, out ivec2 global, out ivec2 local)
{
	local = 2 * ivec2(gl_LocalInvocationID.xy);
	global = local + work * TRUE_WORKGROUP - TRUE_STEPS;
}

// step function, in fact return signed distance to the frame defined by start coord and end coord
// distance measured from inside
int stepFunction(ivec2 coord, ivec2 start, ivec2 end)
{
	ivec2 dc1 = coord - start;
	ivec2 dc2 = end - coord;
	return min(min(dc1.x, dc1.y), min(dc2.x, dc2.y));
}

int getCurrStep(ivec2 work)
{
	ivec2 local = ivec2(gl_LocalInvocationID.xy);
	ivec2 r0 = ivec2(STEPS) - 1;
	ivec2 r1 = WORKGROUP - STEPS + 1;
	if (work.x == numWorkgroupsX - 1) {
		r1.x = WORKGROUP_X;
	}
	if (work.x == 0) {
		r0.x = 0;
	}
	if (work.y == numWorkgroupsY - 1) {
		r1.y = WORKGROUP_Y;
	}
	if (work.y == 0) {
		r0.y = 0;
	}
	r0 += 1;
	r1 += 1;
	return stepFunction(local, r0, r1);
}

bool inRegion(ivec2 coords, ivec2 start, ivec2 end)
{
	return all(lessThanEqual(start, coords)) && all(lessThan(coords, end));
}

bool inBounds(ivec2 global, ivec2 size)
{
	return inRegion(global, ivec2(0), size);
}

bool onBoundary(ivec2 global, ivec2 size)
{
	return any(equal(global, ivec2(0))) || any(equal(global, size - 1)); 
}


// red-black step
float update(float u00, float um10, float u10, float u0m1, float u01, float f00)
{
	float hxhx = hx * hx;
	float hyhy = hy * hy;
	float H = -2.0 / hxhx - 2.0 / hyhy;
	float u = f00 / H - (um10 + u10) / (hxhx * H) - (u0m1 + u01) / (hyhy * H);

	return (1.0 - w) * u00 + w * u;
}

void main()
{
	// some invocation's parameters
	ivec2 work, global, local;
	getWorkgroupID(work, stage);
	getGlobalLocalInvocationID(work, global, local);

	ivec2 size = imageSize(solution[curr]);

	pred_t u00Updateable = pred_t(inBounds(global              , size) && !onBoundary(global              , size));
	pred_t u10Updateable = pred_t(inBounds(global + ivec2(1, 0), size) && !onBoundary(global + ivec2(1, 0), size));
	pred_t u01Updateable = pred_t(inBounds(global + ivec2(0, 1), size) && !onBoundary(global + ivec2(0, 1), size));
	pred_t u11Updateable = pred_t(inBounds(global + ivec2(1, 1), size) && !onBoundary(global + ivec2(1, 1), size));

	int steps = (inBounds(global, size) ? getCurrStep(work) : -STEPS - 1);
	ivec3 corner = whatCorner();

	// cache data
	float f01, f11;
	float f00, f10;

	// loads either value or zero if out of bounds
	f00 = imageLoad(f, global              ).x; 
	f10 = imageLoad(f, global + ivec2(1, 0)).x;
	f01 = imageLoad(f, global + ivec2(0, 1)).x;
	f11 = imageLoad(f, global + ivec2(1, 1)).x;

	float u01 = 0, u11 = 0;
	float u00 = 0, u10 = 0;

	// loads either value or zero if out of bounds
	if (steps >= 0) {
		u00 = imageLoad(solution[curr], global              ).x;
		u10 = imageLoad(solution[curr], global + ivec2(1, 0)).x;
		u01 = imageLoad(solution[curr], global + ivec2(0, 1)).x;
		u11 = imageLoad(solution[curr], global + ivec2(1, 1)).x;
	}

	// cache store
	cacheStoreValue(local              , u00);
	cacheStoreValue(local + ivec2(1, 0), u10);
	cacheStoreValue(local + ivec2(0, 1), u01);
	cacheStoreValue(local + ivec2(1, 1), u11);

	barrier();
	memoryBarrierShared();
	
	// computations	
	for (int i = 1; i <= STEPS; i++, steps++) {
		// load intermediate values
		if (steps == -1) {
			u00 = imageLoad(intermediate, global              ).x;
			u10 = imageLoad(intermediate, global + ivec2(1, 0)).x;
			u01 = imageLoad(intermediate, global + ivec2(0, 1)).x;
			u11 = imageLoad(intermediate, global + ivec2(1, 1)).x;
		}

		// load corners if last iteration
		if (i == STEPS && corner.x != -1) {
			loadCorners(work + corner.yz, corner.x, u00, u10, u01, u11);
		}

		cacheStoreValue(local              , u00);
		cacheStoreValue(local + ivec2(1, 0), u10);
		cacheStoreValue(local + ivec2(0, 1), u01);
		cacheStoreValue(local + ivec2(1, 1), u11);

		barrier();
		memoryBarrierShared();

		// black update
		float u20  = cacheLoadValue(local + ivec2(2,  0)); // right
		float u1m1 = cacheLoadValue(local + ivec2(1, -1)); // bottom

		float u02  = cacheLoadValue(local + ivec2( 0, 2)); // top
		float um11 = cacheLoadValue(local + ivec2(-1, 1)); // left

		float u10_new = update(u10, u00, u20, u1m1, u11, f10);
		float u01_new = update(u01, um11, u11, u00, u02, f01);

		//u10 = u10 + (u10_new - u10) * u10Updateable;
		u10 = UPDATE_VALUE(u10, u10_new, u10Updateable);
		//u01 = u01 + (u01_new - u01) * u01Updateable;
		u01 = UPDATE_VALUE(u01, u01_new, u01Updateable);
		if (steps >= -1) {
			cacheStoreValue(local + ivec2(1, 0), u10);
			cacheStoreValue(local + ivec2(0, 1), u01);
		}

		barrier();
		memoryBarrierShared();

		// red update
		float u0m1 = cacheLoadValue(local + ivec2( 0, -1)); // bottom
		float um10 = cacheLoadValue(local + ivec2(-1,  0)); // left

		float u12 = cacheLoadValue(local + ivec2(1, 2)); // top
		float u21 = cacheLoadValue(local + ivec2(2, 1)); // right

		float u00_new = update(u00, um10, u10, u0m1, u01, f00);
		float u11_new = update(u11, u01, u21, u10, u12, f11);

		//u00 = u00 + (u00_new - u00) * u00Updateable;
		u00 = UPDATE_VALUE(u00, u00_new, u00Updateable);
		//u11 = u11 + (u11_new - u11) * u11Updateable;
		u11 = UPDATE_VALUE(u11, u11_new, u11Updateable);
		if (steps > -1)	{
			cacheStoreValue(local + ivec2(0, 0), u00);
			cacheStoreValue(local + ivec2(1, 1), u11);
		}

		// load next iter
		if (i != STEPS && steps == -1) {
			u00 = imageLoad(solution[curr ^ 1], global              ).x;
			u10 = imageLoad(solution[curr ^ 1], global + ivec2(1, 0)).x;
			u01 = imageLoad(solution[curr ^ 1], global + ivec2(0, 1)).x;
			u11 = imageLoad(solution[curr ^ 1], global + ivec2(1, 1)).x;
		}

		// stored in cache in the next loop iteration
		//cacheStoreValue(local              , u00);
		//cacheStoreValue(local + ivec2(1, 0), u10);
		//cacheStoreValue(local + ivec2(0, 1), u01);
		//cacheStoreValue(local + ivec2(1, 1), u11);

		//barrier();
		//memoryBarrierShared();
	}
	
	// store updated value
	if (steps > 0) { // out of bound writes are ignored, u[01][01] are already updated
		imageStore(solution[curr ^ 1], global              , vec4(u00));
		imageStore(solution[curr ^ 1], global + ivec2(1, 0), vec4(u10));
		imageStore(solution[curr ^ 1], global + ivec2(0, 1), vec4(u01));
		imageStore(solution[curr ^ 1], global + ivec2(1, 1), vec4(u11));
	}
}
