#version 460 core

#define WORKGROUP_X 16
#define WORKGROUP_Y 16

#define WORKGROUP ivec2(WORKGROUP_X, WORKGROUP_Y)

#define CACHE_X (WORKGROUP_X + 2)
#define CACHE_Y (WORKGROUP_Y + 2)
#define CACHE_SIZE (CACHE_X * CACHE_Y)

layout(local_size_x = WORKGROUP_X, local_size_y = WORKGROUP_Y) in;

// used both for read and write, boundary is not calculated
layout(binding = 0, r32f) uniform image2D solution[2];

uniform int curr; // 0 or 1
uniform float x0;
uniform float y0;
uniform float hx;
uniform float hy;

// first is x, second is y
shared float cache[CACHE_SIZE];

int cacheFlatIndex(ivec2 indices)
{
	return (indices[0] + 1) * CACHE_Y + (indices[1] + 1);
}

float cacheLoadValue(ivec2 indices)
{
	return cache[cacheFlatIndex(indices)];
}

void cacheStoreValue(ivec2 indices, float value)
{
	cache[cacheFlatIndex(indices)] = value;
}

// returns local index(zero-based), global(can be out of bounds) 
void getGlobalLocalInvocationID(out ivec2 global, out ivec2 local)
{
	local = ivec2(gl_LocalInvocationID.xy);
	global = ivec2(gl_GlobalInvocationID.xy);
}

bool inInnerDomainX(ivec2 global, ivec2 size)
{
	return 0 < global[0] && global[0] < size[0] - 1;
}

bool inInnerDomainY(ivec2 global, ivec2 size)
{
	return 0 < global[1] && global[1] < size[1] - 1;
}

bool inInnerDomain(ivec2 global, ivec2 size)
{
	return inInnerDomainX(global, size) && inInnerDomainY(global, size); 
}

bool onUpperBoundaryX(ivec2 coord, ivec2 size)
{
	return coord[0] == size[0] - 1;
}

bool onLowerBoundaryX(ivec2 coord, ivec2 size)
{
	return coord[0] == 0;
}

bool onUpperBoundaryY(ivec2 coord, ivec2 size)
{
	return coord[1] == size[1] - 1;
}

bool onLowerBoundaryY(ivec2 coord, ivec2 size)
{
	return coord[1] == 0;
}

float f(ivec2 indices)
{
	float x = x0 + indices[0] * hx;
	float y = y0 + indices[1] * hy;
	float xxpyy = x * x + y * y;
	return 4.0 * (xxpyy - 1.0) * exp(-xxpyy);
}

// jacoby update
float update(float um10, float u10, float u0m1, float u01, float f00)
{
	float hxhx = hx * hx;
	float hyhy = hy * hy;
	float H = -2.0 / hxhx - 2.0 / hyhy;

	return f00 / H - (um10 + u10) / (hxhx * H) - (u0m1 + u01) / (hyhy * H);
}

void main()
{
	ivec2 global, local;
	getGlobalLocalInvocationID(global, local);

	ivec2 size = imageSize(solution[0]);

	cacheStoreValue(local, imageLoad(solution[curr], global).x);
	if (inInnerDomainY(global, size))
	{
		if (onUpperBoundaryY(local, WORKGROUP))
		{
			cacheStoreValue(local + ivec2(0, 1), imageLoad(solution[curr], global + ivec2(0, 1)).x);
		}
		if (onLowerBoundaryY(local, WORKGROUP))
		{
			cacheStoreValue(local + ivec2(0, -1), imageLoad(solution[curr], global + ivec2(0, -1)).x);
		}
	}
	if (inInnerDomainX(global, size))
	{
		if (onUpperBoundaryX(local, WORKGROUP))
		{
			cacheStoreValue(local + ivec2(1, 0), imageLoad(solution[curr], global + ivec2(1, 0)).x);
		}
		if (onLowerBoundaryX(local, WORKGROUP))
		{
			cacheStoreValue(local + ivec2(-1, 0), imageLoad(solution[curr], global + ivec2(-1, 0)).x);
		}
	}
	memoryBarrierShared();
	barrier();

	if (inInnerDomain(global, size))
	{
		float um10 = cacheLoadValue(local + ivec2(-1, 0));
		float u10  = cacheLoadValue(local + ivec2(+1, 0));
		float u0m1 = cacheLoadValue(local + ivec2(0, -1));
		float u01  = cacheLoadValue(local + ivec2(0, +1));

		imageStore(solution[curr ^ 1], global, vec4(update(um10, u10, u0m1, u01, f(global))));
	}
}
