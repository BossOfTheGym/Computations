#version 460 core

#define STEPS 3

#define TRUE_STEPS (2 * STEPS)

#define WORKGROUP_X 8
#define WORKGROUP_Y 8
#define WORKGROUP ivec2(WORKGROUP_X, WORKGROUP_Y)

#define TRUE_WORKGROUP_X (2 * WORKGROUP_X)
#define TRUE_WORKGROUP_Y (2 * WORKGROUP_Y)
#define TRUE_WORKGROUP ivec2(TRUE_WORKGROUP_X, TRUE_WORKGROUP_Y)

#define WORKGROUP_X_OVERLAP (WORKGROUP_X + STEPS * 2)
#define WORKGROUP_Y_OVERLAP (WORKGROUP_Y + STEPS * 2)
#define WORKGROUP_OVERLAP ivec2(WORKGROUP_X_OVERLAP, WORKGROUP_Y_OVERLAP)

#define TRUE_WORKGROUP_X_OVERLAP (2 * WORKGROUP_X_OVERLAP)
#define TRUE_WORKGROUP_Y_OVERLAP (2 * WORKGROUP_Y_OVERLAP)
#define TRUE_WORKGROUP_OVERLAP ivec2(TRUE_WORKGROUP_X_OVERLAP, TRUE_WORKGROUP_Y_OVERLAP)

layout(local_size_x = WORKGROUP_X + STEPS * 2, local_size_y = WORKGROUP_Y + STEPS * 2) in;

#define CACHE_X (TRUE_WORKGROUP_X_OVERLAP)
#define CACHE_Y (TRUE_WORKGROUP_Y_OVERLAP)
#define CACHE_SIZE (CACHE_Y * CACHE_X)

// picture is stored in a row-major manner
// used both for read and write, boundary is not calculated
layout(binding = 0, r32f) uniform image2D solution[2];
layout(binding = 2, r32f) uniform readonly image2D f;

uniform int curr; // 0 or 1
uniform float w;
uniform float hx;
uniform float hy;

// first is x(i), second is y(j)
shared float cache[CACHE_SIZE];

int cacheFlatIndex(ivec2 indices)
{
	return indices.x * CACHE_Y + indices.y;
}

float cacheLoadValue(ivec2 indices)
{
	return cache[cacheFlatIndex(indices)];
}

void cacheStoreValue(ivec2 indices, float value)
{
	cache[cacheFlatIndex(indices)] = value;
}

// returns local index(zero-based), global(can be out of bounds)
void getGlobalLocalInvocationID(out ivec2 global, out ivec2 local)
{
	ivec2 work = ivec2(gl_WorkGroupID.xy);

	local = 2 * ivec2(gl_LocalInvocationID.xy);
	global = local - ivec2(TRUE_STEPS) + work * TRUE_WORKGROUP;
}

bool inRegion(ivec2 coords, ivec2 start, ivec2 end)
{
	return start.x <= coords.x && coords.x < end.x 
		&& start.y <= coords.y && coords.y < end.y;
}

bool inBounds(ivec2 global, ivec2 size)
{
	return inRegion(global, ivec2(0), size);
}
 
bool inComputeRegion(ivec2 local, int step)
{
	ivec2 offset = ivec2(2 * step);

	return inRegion(local, offset, TRUE_WORKGROUP_OVERLAP - offset);
}

bool onBoundary(ivec2 global, ivec2 size)
{
	return global.x == 0 || global.x == size.x - 1 
		|| global.y == 0 || global.y == size.y - 1;
}

// red-black step
float update(float u00, float um10, float u10, float u0m1, float u01, float f00)
{
	float hxhx = hx * hx;
	float hyhy = hy * hy;
	float H = -2.0 / hxhx - 2.0 / hyhy;
	float u = f00 / H - (um10 + u10) / (hxhx * H) - (u0m1 + u01) / (hyhy * H);

	return (1.0 - w) * u00 + w * u;
}

void main()
{
	// indices & size, good
	ivec2 global, local;
	getGlobalLocalInvocationID(global, local);

	ivec2 size = imageSize(solution[curr]);

	// some invocation's parameters
	bool globalInBounds = inBounds(global, size);

	bool u00OnBound = onBoundary(global              , size);
	bool u10OnBound = onBoundary(global + ivec2(1, 0), size);
	bool u01OnBound = onBoundary(global + ivec2(0, 1), size);
	bool u11OnBound = onBoundary(global + ivec2(1, 1), size);

	// cache f & solution
	float             f12;
	float       f01 , f11, f21;
	float fm10, f00 , f10;
	float       f0m1;

	if (globalInBounds)
	{
		f00 = imageLoad(f, global              ).x;
		f10 = imageLoad(f, global + ivec2(1, 0)).x;
		f01 = imageLoad(f, global + ivec2(0, 1)).x;
		f11 = imageLoad(f, global + ivec2(1, 1)).x;
		
		fm10 = imageLoad(f, global + ivec2(-1, 0)).x;
		f0m1 = imageLoad(f, global + ivec2(0, -1)).x;
		
		f21 = imageLoad(f, global + ivec2(2, 1)).x;
		f12 = imageLoad(f, global + ivec2(1, 2)).x;

		cacheStoreValue(local              , imageLoad(solution[curr], global              ).x);
		cacheStoreValue(local + ivec2(1, 0), imageLoad(solution[curr], global + ivec2(1, 0)).x);
		cacheStoreValue(local + ivec2(0, 1), imageLoad(solution[curr], global + ivec2(0, 1)).x);
		cacheStoreValue(local + ivec2(1, 1), imageLoad(solution[curr], global + ivec2(1, 1)).x);
	}
	barrier();
	memoryBarrierShared();
	
	// preload data that it is local to invocation and those changes must be reflected in cache
	
	//float             u12;
	//float       u01 , u11, u21;
	//float um10, u00 , u10;
	//float       u0m1;

	//u12 = cacheLoadValue(local + ivec2(1, 2));
	//u21 = cacheLoadValue(local + ivec2(2, 1));

	//u0m1 = cacheLoadValue(local + ivec2(0, -1));
	//um10 = cacheLoadValue(local + ivec2(-1, 0));

	//u00 = cacheLoadValue(local              );
	//u10 = cacheLoadValue(local + ivec2(1, 0));
	//u01 = cacheLoadValue(local + ivec2(0, 1));
	//u11 = cacheLoadValue(local + ivec2(1, 1));

	float u01 , u11;
	float u00 , u10;

	float um10, u12, u21, u0m1;

	if (globalInBounds)
	{
		// it can safely load values from out of bounds since its cache(they will be just undefined)
		// it's not bad since values involving undefined ones will not be updated(values to update are checked)
		// it can be even better just to read them to avoid additional branch divirgency
		u00 = cacheLoadValue(local              );
		u10 = cacheLoadValue(local + ivec2(1, 0));
		u01 = cacheLoadValue(local + ivec2(0, 1));
		u11 = cacheLoadValue(local + ivec2(1, 1));
	}

	// computations
	for (int i = 1; i <= STEPS; i++)
	{
		float                    u13 ;
		float              u02 ,       u22;
		float       um11 ,                  u31;
		float um20,                    u20;
		float       um1m1,       u1m1;
		float              u0m2;

		

		bool localInComputeReg = inComputeRegion(local, i);

		if (globalInBounds && localInComputeReg)
		{
			// it can safely load values from out of bounds since its cache(they will be just undefined)
			// it's not bad since values involving undefined ones will not be updated(values to update are checked)
			// it can be even better just to read them to avoid additional branch divirgency
			u13 = cacheLoadValue(local + ivec2(1, 3));
			u02 = cacheLoadValue(local + ivec2(0, 2));

			u22 = cacheLoadValue(local + ivec2(2, 2));

			um11 = cacheLoadValue(local + ivec2(-1, 1));
			um20 = cacheLoadValue(local + ivec2(-2, 0));

			u31 = cacheLoadValue(local + ivec2(3, 1));
			u20 = cacheLoadValue(local + ivec2(2, 0));

			um1m1 = cacheLoadValue(local + ivec2(-1, -1));

			u1m1 = cacheLoadValue(local + ivec2(1, -1));
			u0m2 = cacheLoadValue(local + ivec2(0, -2));

			u12 = cacheLoadValue(local + ivec2(1, 2));
			u21 = cacheLoadValue(local + ivec2(2, 1));

			u0m1 = cacheLoadValue(local + ivec2(0, -1));
			um10 = cacheLoadValue(local + ivec2(-1, 0));		
		}
		barrier();
		memoryBarrierShared();

		if (globalInBounds && localInComputeReg)
		{
			if (!u10OnBound)
			{
				u10 = update(u10, u00, u20, u1m1, u11, f10); // black
			}
			if (!u01OnBound)
			{
				u01 = update(u01, um11, u11, u00, u02, f01); // black
			}
			if (!u11OnBound)
			{
				u12 = update(u12, u02, u22, u11, u13, f12); // black
				u21 = update(u21, u11, u31, u20, u22, f21); // black

				u11 = update(u11, u01, u21, u10, u12, f11); // red
			}
			if (!u00OnBound)
			{
				um10 = update(um10, um20, u00, um1m1, um11, fm10); // black
				u0m1 = update(u0m1, um1m1, u1m1, u0m2, u00, f0m1); // black

				u00 = update(u00, um10, u10, u0m1, u01, f00); // red
			}

			cacheStoreValue(local              , u00);
			cacheStoreValue(local + ivec2(1, 0), u10);
			cacheStoreValue(local + ivec2(0, 1), u01);
			cacheStoreValue(local + ivec2(1, 1), u11);
		}
		barrier();
		memoryBarrierShared();
	}

	if (inComputeRegion(local, STEPS))
	{
		imageStore(solution[curr ^ 1], global              , vec4(cacheLoadValue(local              )));
		imageStore(solution[curr ^ 1], global + ivec2(1, 0), vec4(cacheLoadValue(local + ivec2(1, 0))));
		imageStore(solution[curr ^ 1], global + ivec2(0, 1), vec4(cacheLoadValue(local + ivec2(0, 1))));
		imageStore(solution[curr ^ 1], global + ivec2(1, 1), vec4(cacheLoadValue(local + ivec2(1, 1))));
	}
}
