#version 460 core

#ifndef _CONFIGURED
	#define _STEPS 2
	#define _WORKGROUP_X 16
	#define _WORKGROUP_Y 16
#endif

#define FMT r32f

#define STAGE 0

#define STEPS _STEPS
#define TRUE_STEPS (2 * STEPS)

#define WORKGROUP_X (_WORKGROUP_X / 2)
#define WORKGROUP_Y (_WORKGROUP_Y / 2)
#define WORKGROUP ivec2(WORKGROUP_X, WORKGROUP_Y)

#define TRUE_WORKGROUP_X (2 * WORKGROUP_X)
#define TRUE_WORKGROUP_Y (2 * WORKGROUP_Y)
#define TRUE_WORKGROUP ivec2(TRUE_WORKGROUP_X, TRUE_WORKGROUP_Y)

#define WORKGROUP_X_OVERLAP (WORKGROUP_X + STEPS * 2)
#define WORKGROUP_Y_OVERLAP (WORKGROUP_Y + STEPS * 2)
#define WORKGROUP_OVERLAP ivec2(WORKGROUP_X_OVERLAP, WORKGROUP_Y_OVERLAP)

#define TRUE_WORKGROUP_X_OVERLAP (2 * WORKGROUP_X_OVERLAP)
#define TRUE_WORKGROUP_Y_OVERLAP (2 * WORKGROUP_Y_OVERLAP)
#define TRUE_WORKGROUP_OVERLAP ivec2(TRUE_WORKGROUP_X_OVERLAP, TRUE_WORKGROUP_Y_OVERLAP)

#ifndef FAST_UPDATE
	#define pred_t bool
	#define UPDATE_VALUE(u, u_new, pred) ((pred) ? (u_new) : (u))
#else
	#define pred_t float
	#define UPDATE_VALUE(u, u_new, pred) ((u) + ((u_new) - (u)) * (pred))
#endif

layout(local_size_x = WORKGROUP_X + STEPS * 2, local_size_y = WORKGROUP_Y + STEPS * 2) in;

#define CACHE_X (TRUE_WORKGROUP_X_OVERLAP + 2)
#define CACHE_Y (TRUE_WORKGROUP_Y_OVERLAP + 2)
#define CACHE_SIZE (CACHE_Y * CACHE_X)

// picture is stored in a row-major manner
// used both for read and write, boundary is not calculated
layout(binding = 0, FMT) uniform restrict image2D solution[2];
layout(binding = 2, FMT) uniform restrict readonly image2D f;
layout(binding = 3, FMT) uniform restrict image2D intermediate;

uniform int curr; // 0 or 1
uniform float w;
uniform float hx;
uniform float hy;
uniform int numWorkgroupsX; // num of workgroups along x-axis
uniform int numWorkgroupsY; // num of workgroups along y-axis

// first is x(i), second is y(j)
shared float cache[CACHE_SIZE];

int cacheFlatIndex(ivec2 indices)
{
	return indices.x * CACHE_Y + indices.y + (CACHE_Y + 1);
}

float cacheLoadValue(ivec2 indices)
{
	return cache[cacheFlatIndex(indices)];
}

void cacheStoreValue(ivec2 indices, float value)
{
	cache[cacheFlatIndex(indices)] = value;
}

// recalculate workgroup id (checkerboard pattern)
// example grig 5x5:
// 0 1 | 0 1 | 0  - last row, index calculated differently
// -------------
// 1 0 | 1 0 | 1
// 0 1 | 0 1 | 0
// -------------
// 1 0 | 1 0 | 1
// 0 1 | 0 1 | 0
void getWorkgroupID(out ivec2 work, int currStage)
{
	int id = int(gl_WorkGroupID.x);
	work.x = id % numWorkgroupsX;     // base case
	work.y = id / numWorkgroupsX * 2; // base case
	if (work.y == numWorkgroupsY - 1) { // triggered only if numWorkgroupsY is uneven and work.y is last row
		work.x = 2 * work.x + currStage; // last row index (stage inverted)
	}
	work.y += (work.x + currStage) % 2; // if last row then turns into work.y += 0
}

// returns local index(zero-based), global(can be out of bounds)
void getGlobalLocalInvocationID(in ivec2 work, out ivec2 global, out ivec2 local)
{
	local = 2 * ivec2(gl_LocalInvocationID.xy);
	global = local + work * TRUE_WORKGROUP - TRUE_STEPS;
}

// step function, in fact return signed distance to the frame defined by start coord and end coord
// distance measured from inside
int stepFunction(ivec2 coord, ivec2 start, ivec2 end)
{
	ivec2 dc1 = coord - start;
	ivec2 dc2 = end - coord;
	return min(min(dc1.x, dc1.y), min(dc2.x, dc2.y));
}

int getCurrStep()
{
	return stepFunction(ivec2(gl_LocalInvocationID.xy), ivec2(0), WORKGROUP_OVERLAP - 1);
}

bool inRegion(ivec2 coords, ivec2 start, ivec2 end)
{
	return all(lessThanEqual(start, coords)) && all(lessThan(coords, end));
}

bool inBounds(ivec2 global, ivec2 size)
{
	return inRegion(global, ivec2(0), size);
}

bool onBoundary(ivec2 global, ivec2 size)
{
	return any(equal(global, ivec2(0))) || any(equal(global, size - 1)); 
}

#define NONE 0
#define LEFT 1
#define RIGHT 2
#define TOP 3
#define BOTTOM 4

const vec3 leafColors[5] = {
	vec3(0.0),
	vec3(1.0, 0.0, 0.0),
	vec3(0.0, 1.0, 0.0),
	vec3(0.0, 0.0, 1.0),
	vec3(0.5)
};

int onFlowerLeaf(ivec2 work)
{
	int X = WORKGROUP_X;
	int Y = WORKGROUP_Y;
	int S = STEPS;
	ivec2 p = ivec2(gl_LocalInvocationID.xy);
	ivec2 W = ivec2(numWorkgroupsX, numWorkgroupsY);

	if (p.y < S) { // bottom, base: (S, S - 1)
		int x = -(p.y - (S - 1));
		int y = p.x - (S);
		int y0 = x - 1;     // default line
		int y1 = (X - 1) - x; // default line
		if (work.x == 0) {
			y0 = -1;
		}
		if (work.x == W.x - 1) {
			y1 = X;
		}
		if (y0 < y && y < y1) {
			return BOTTOM;
		}
	}

	if (p.y >= S + Y) { // top, base: (S + X - 1, S + Y)
		int x = p.y - (S + Y);
		int y = -(p.x - (S + X - 1));
		int y0 = x - 1;     // default line
		int y1 = (X - 1) - x; // default line
		if (work.x == 0) {
			y1 = X;
		}
		if (work.x == W.x - 1) {
			y0 = -1;
		}
		if (y0 < y && y < y1) {
			return TOP;
		}
	}

	if (p.x < S) { // left, base: (S - 1, S + Y - 1)
		int x = -(p.x - (S - 1));
		int y = -(p.y - (S + Y - 1));
		int y0 = x - 1;     // default line
		int y1 = (Y - 1) - x; // default line
		if (work.y == 0) {
			y1 = Y;
		}
		if (work.y == W.y - 1) {
			y0 = -1;
		}
		if (y0 < y && y < y1) {
			return LEFT;
		}
	}
	
	if (p.x >= S + X) { // right, base: (S + X, S)
		int x = p.x - (S + X);
		int y = p.y - S;
		int y0 = x - 1;     // default line
		int y1 = (Y - 1) - x; // default line
		if (work.y == 0) {
			y0 = -1;
		}
		if (work.y == W.y - 1) {
			y1 = Y;
		}
		if (y0 < y && y < y1) {
			return RIGHT;
		}
	}

	return NONE;
}

// red-black step
float update(float u00, float um10, float u10, float u0m1, float u01, float f00)
{
	float hxhx = hx * hx;
	float hyhy = hy * hy;
	float H = -2.0 / hxhx - 2.0 / hyhy;
	float u = f00 / H - (um10 + u10) / (hxhx * H) - (u0m1 + u01) / (hyhy * H);

	return (1.0 - w) * u00 + w * u;
}

void main()
{
	// some invocation's parameters
	ivec2 work, global, local;
	getWorkgroupID(work, STAGE);
	getGlobalLocalInvocationID(work, global, local);

	ivec2 size = imageSize(solution[curr]);

	pred_t u00Updateable = pred_t(inBounds(global              , size) && !onBoundary(global              , size));
	pred_t u10Updateable = pred_t(inBounds(global + ivec2(1, 0), size) && !onBoundary(global + ivec2(1, 0), size));
	pred_t u01Updateable = pred_t(inBounds(global + ivec2(0, 1), size) && !onBoundary(global + ivec2(0, 1), size));
	pred_t u11Updateable = pred_t(inBounds(global + ivec2(1, 1), size) && !onBoundary(global + ivec2(1, 1), size));

	int leaf = onFlowerLeaf(work);
	bool onFlowerLeafPred = (leaf != NONE);

	int steps = (inBounds(global, size) ? getCurrStep() : -1);

	// cache data
	// loads either value or zero if out of bounds
	float f00 = imageLoad(f, global              ).x; 
	float f10 = imageLoad(f, global + ivec2(1, 0)).x;
	float f01 = imageLoad(f, global + ivec2(0, 1)).x;
	float f11 = imageLoad(f, global + ivec2(1, 1)).x;

	// loads either value or zero if out of bounds
	float u00 = imageLoad(solution[curr], global              ).x;
	float u10 = imageLoad(solution[curr], global + ivec2(1, 0)).x;
	float u01 = imageLoad(solution[curr], global + ivec2(0, 1)).x;
	float u11 = imageLoad(solution[curr], global + ivec2(1, 1)).x;

	// cache store
	cacheStoreValue(local              , u00);
	cacheStoreValue(local + ivec2(1, 0), u10);
	cacheStoreValue(local + ivec2(0, 1), u01);
	cacheStoreValue(local + ivec2(1, 1), u11);
	barrier();
	
	// computations	
	for (int i = 1; i < STEPS; i++, steps--) {
		// store intermediate values
		if (steps == 1 && onFlowerLeafPred) { // could've been steps == i but steps var is decremented
			imageStore(intermediate, global              , vec4(u00));
			imageStore(intermediate, global + ivec2(1, 0), vec4(u10));
			imageStore(intermediate, global + ivec2(0, 1), vec4(u01));
			imageStore(intermediate, global + ivec2(1, 1), vec4(u11));
		}

		// black update
		float u20  = cacheLoadValue(local + ivec2(2,  0)); // right
		float u1m1 = cacheLoadValue(local + ivec2(1, -1)); // bottom

		float u02  = cacheLoadValue(local + ivec2( 0, 2)); // top
		float um11 = cacheLoadValue(local + ivec2(-1, 1)); // left

		float u10_new = update(u10, u00, u20, u1m1, u11, f10);
		float u01_new = update(u01, um11, u11, u00, u02, f01);

		u10 = UPDATE_VALUE(u10, u10_new, u10Updateable);
		u01 = UPDATE_VALUE(u01, u01_new, u01Updateable);
		if (steps >= 0) {
			cacheStoreValue(local + ivec2(1, 0), u10);
			cacheStoreValue(local + ivec2(0, 1), u01);
		}
		barrier();

		// red update
		float u0m1 = cacheLoadValue(local + ivec2( 0, -1)); // bottom
		float um10 = cacheLoadValue(local + ivec2(-1,  0)); // left

		float u12 = cacheLoadValue(local + ivec2(1, 2)); // top
		float u21 = cacheLoadValue(local + ivec2(2, 1)); // right

		float u00_new = update(u00, um10, u10, u0m1, u01, f00);
		float u11_new = update(u11, u01, u21, u10, u12, f11);

		u00 = UPDATE_VALUE(u00, u00_new, u00Updateable);
		u11 = UPDATE_VALUE(u11, u11_new, u11Updateable);
		if (steps > 0)	{
			cacheStoreValue(local + ivec2(0, 0), u00);
			cacheStoreValue(local + ivec2(1, 1), u11);
		}
		barrier();

		// store only flower leaves(zero-iter is already stored in solution[curr])
		if (steps == 1 && onFlowerLeafPred) {
			imageStore(solution[curr ^ 1], global              , vec4(u00));
			imageStore(solution[curr ^ 1], global + ivec2(1, 0), vec4(u10));
			imageStore(solution[curr ^ 1], global + ivec2(0, 1), vec4(u01));
			imageStore(solution[curr ^ 1], global + ivec2(1, 1), vec4(u11));
		}
	}

	// store only main region
	if (steps >= 1) { // out of bound writes are ignored, u[01][01] are already updated
		imageStore(solution[curr ^ 1], global              , vec4(u00));
		imageStore(solution[curr ^ 1], global + ivec2(1, 0), vec4(u10));
		imageStore(solution[curr ^ 1], global + ivec2(0, 1), vec4(u01));
		imageStore(solution[curr ^ 1], global + ivec2(1, 1), vec4(u11));
	}
}
